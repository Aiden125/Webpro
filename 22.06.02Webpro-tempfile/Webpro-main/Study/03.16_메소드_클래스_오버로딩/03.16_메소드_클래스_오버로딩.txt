3.16

1. 메소드
public = 다른 파일에서도 같이 쓸 수 있게 정의
private = 오직 그 파일에서만 쓸 수 있게 정의
static = 바로 쓸 수 있게 정의(static을 안쓰면 일반메소드로 정의)
일반 메소드를 쓰려면 새로운 메모리 공간 할당 후
해당 변수를 파일이름처럼 사용하면됨
ex)
static 구문 : System.out.println(Arithmetic.evenOdd(tot));
일반 메소드 구문 :
Arithmetic ar = new Arithmetic();
System.out.println(ar.abs(-8));

2. 함수의 오버로딩
함수를 여러번 정의하는것, 매개변수가 몇개인지에 따라
구분이 다르게 됨 밑에는 예시
private static void printline(char c, int cnt) {
for(int i = 0 ; i<cnt ; i++) {
System.out.print(c);
}
System.out.println();
}
private static void printline(char c ) {
for(int i = 0 ; i<30 ; i++) {
System.out.print(c);
}
System.out.println();
}

3. 재귀적 함수호출(해당 함수를 다시 호출해 식을 완성하는 법)
private static long factorial(int su) { // su가 1초과인 경우 su*facorial(su-1)
if(su==1) {
return 1;
}else {
return su*factorial(su-1);
}
}

4. 문제 풀어보기
사용자로부터 원하는 단수(2~9) 구구단을 출력하는 프로그램을 구현하시오.
(단, 단수를 매개변수로 받아 해당 단수의 구구단을 출력하는 부분을 method로 처리한다.
사용자가 2~9 사이의 수가 아닌 수를 입력할 시 2~9사이의 수를 입력할 때까지 계속 입력 받는다.)

5. setter & getter

ㄴ6. class이해하기.
함수의 주머니 같은 공간
함수 및 메소드 정의 가능
private 영어 및 public 영역 나눠짐

7. 매개변수가 없는 생성자
매개변수가 있는 생성자